import{getStore}from"../../redux/store";import{cloneDeep}from"lodash";import{activeBundle,availableLocales}from"../../i18n/index";import{getProxyUrl}from"../../api/apiRequest";import{ESDEV_POPUP_PIXIE_EDITOR}from"../../const";let pixieEditor,localeConfig,editorLocale;export function init(e="en",i){if(editorLocale=availableLocales.indexOf(e)>-1?e:"en",localeConfig={active:editorLocale,custom:{[`${e}`]:getLanguageBundle()}},pixieEditor)return void i();const t=$(`.${ESDEV_POPUP_PIXIE_EDITOR}`);t.find("pixie-editor").remove(),t.prepend('<pixie-editor style="position: fixed"></pixie-editor>');let o={crossOrigin:getStore().getState().config.useCredentialsForAssets?"use-credentials":"anonymous",urls:{assets:`${window.Stripo.bp}assets/imageeditor/`},ui:{openImageDialog:!1,mode:"overlay",toolbar:{hideCloseButton:!1}},onLoad:()=>{i()}};const{config:n}=getStore().getState(),r=n&&n.imageEditor&&n.imageEditor.stickers&&n.imageEditor.stickers.emotIcons;if(r){const e=cloneDeep(Pixie.prototype.getDefaultConfig("tools.stickers")),i=e.items.find((e=>"emoticons"===e.name));r.exclude&&r.exclude.length&&(i.list=i.list.filter((e=>!r.exclude.includes(e)))),r.include&&r.include.length&&(i.list=i.list.filter((e=>r.include.includes(e)))),o.tools={stickers:e}}if(!getStore().getState().config.imageEditor.stickersEnable){const e=Pixie.prototype.getDefaultConfig("ui.nav"),i=e.items.filter((e=>"stickers"!==e.name));o.ui.nav=Object.assign(e,{items:i})}pixieEditor=new Pixie(o)}export function openEditor(e,i,t,o,n,r){n&&n(),pixieEditor.setConfig("languages",localeConfig),pixieEditor.setConfig("onOpen",(()=>{r&&r()})),pixieEditor.setConfig("onSave",function(i,o){t(e,i,o),pixieEditor.close()}.bind(this)),pixieEditor.setConfig("onClose",function(){o&&o()}.bind(this));const s=i&&(i.endsWith(".jpg")||i.endsWith(".jpeg"))?"jpeg":"png";pixieEditor.setConfig("tools.export.defaultFormat",s),pixieEditor.resetAndOpenEditor("image",createImageSrcProxy(i))}export function destroy(){pixieEditor&&(pixieEditor.destroyEditor(),pixieEditor=null)}function getLanguageBundle(){const e={};for(let i of Object.keys(activeBundle))i.startsWith("pixie.")&&(e[i.replace("pixie.","")]=activeBundle[i]);return e}export function createImageSrcProxy(e){const i=getStore().getState().config;return`${i.pluginMode?getProxyUrl():i.imagesProxy}?url=${e}`}